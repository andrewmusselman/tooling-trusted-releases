# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import dataclasses
import enum
import pathlib
from collections.abc import Callable

import atr.models.schema as schema
import atr.models.sql as sql
import atr.storage.outcome as outcome


@dataclasses.dataclass
class CheckResults:
    primary_results_list: list[sql.CheckResult]
    member_results_list: dict[str, list[sql.CheckResult]]
    ignored_checks: list[sql.CheckResult]


class KeyStatus(enum.Flag):
    PARSED = 0
    INSERTED = enum.auto()
    LINKED = enum.auto()
    INSERTED_AND_LINKED = INSERTED | LINKED


class Key(schema.Strict):
    status: KeyStatus
    key_model: sql.PublicSigningKey


@dataclasses.dataclass
class LinkedCommittee:
    name: str
    autogenerated_keys_file: outcome.Outcome[str]


class PathInfo(schema.Strict):
    artifacts: set[pathlib.Path] = schema.factory(set)
    errors: dict[pathlib.Path, list[sql.CheckResult]] = schema.factory(dict)
    ignored_errors: list[sql.CheckResult] = schema.factory(list)
    ignored_warnings: list[sql.CheckResult] = schema.factory(list)
    metadata: set[pathlib.Path] = schema.factory(set)
    successes: dict[pathlib.Path, list[sql.CheckResult]] = schema.factory(dict)
    warnings: dict[pathlib.Path, list[sql.CheckResult]] = schema.factory(dict)


@dataclasses.dataclass
class ChecksSubset:
    release: sql.Release
    latest_revision_number: str
    info: PathInfo
    match_ignore: Callable[[sql.CheckResult], bool]


class PublicKeyError(Exception):
    def __init__(self, key: Key, original_error: Exception):
        self.__key = key
        self.__original_error = original_error

    def __str__(self) -> str:
        return f"PublicKeyError: {self.__original_error}"

    @property
    def key(self) -> Key:
        return self.__key

    @property
    def original_error(self) -> Exception:
        return self.__original_error


class FailedError(Exception):
    pass


@dataclasses.dataclass
class Creating:
    old: sql.Revision | None
    interim_path: pathlib.Path
    new: sql.Revision | None
    failed: FailedError | None = None
