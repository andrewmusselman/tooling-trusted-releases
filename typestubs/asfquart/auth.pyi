"""
This type stub file was generated by pyright.
"""

import typing
from . import base, session

"""ASFQuart - Authentication methods and decorators"""

class Requirements:
    """Various pre-defined access requirements"""

    E_NOT_LOGGED_IN = ...
    E_NOT_MEMBER = ...
    E_NOT_CHAIR = ...
    E_NO_MFA = ...
    E_NOT_ROOT = ...
    E_NOT_PMC = ...
    E_NOT_ROLEACCOUNT = ...
    @classmethod
    def mfa_enabled(cls, client_session: session.ClientSession):  # -> tuple[bool, LiteralString]:
        """Tests for MFA enabled in the client session"""
        ...
    @classmethod
    def committer(
        cls, client_session: session.ClientSession
    ):  # -> tuple[bool, Literal['You need to be logged in to access this endpoint.']]:
        """Tests for whether the user is a committer on any project"""
        ...
    @classmethod
    def member(cls, client_session: session.ClientSession):  # -> tuple[bool, LiteralString]:
        """Tests for whether the user is a foundation member"""
        ...
    @classmethod
    def chair(cls, client_session: session.ClientSession):  # -> tuple[bool, LiteralString]:
        """tests for whether the user is a chair of any top-level project"""
        ...
    @classmethod
    def root(cls, client_session: session.ClientSession):  # -> tuple[bool, LiteralString]:
        """tests for whether the user is a member of infra-root"""
        ...
    @classmethod
    def pmc_member(cls, client_session: session.ClientSession):  # -> tuple[bool, LiteralString]:
        """tests for whether the user is a PMC member of any top-level project"""
        ...
    @classmethod
    def roleacct(
        cls, client_session: session.ClientSession
    ):  # -> tuple[bool, Literal['This endpoint is only accessible to role accounts.']]:
        """tests for whether the user is a service account"""
        ...

class AuthenticationFailed(base.ASFQuartException):
    def __init__(self, message: str = ..., errorcode: int = ...) -> None: ...

def requirements_to_iter(args: typing.Any):  # -> list[Any] | Any | Iterable[Any]:
    """Converts any auth req args (single arg, list, tuple) to an iterable if not already one"""
    ...

def require(
    func: typing.Optional[typing.Callable] = ...,
    all_of: typing.Optional[typing.Iterable] = ...,
    any_of: typing.Optional[typing.Iterable] = ...,
):
    """Adds authentication/authorization requirements to an endpoint. Can be a single requirement or a list
    of requirements. By default, all requirements must be satisfied, though this can be made optional by
    explicitly using the `all_of` or `any_of` keywords to specify optionality. Requirements must be part
    of the asfquart.auth.Requirements class, which consists of the following test:

    - mfa_enabled: The client must authenticate with a method that has MFA enabled
    - committer: The client must be a committer
    - member: The client must be a foundation member
    - chair: The client must be a chair of a project

    In addition, any endpoint decorated with @require will implicitly require ANY form of
    authenticated session. This is mandatory and also works as a bare decorator.

    Examples:
        @require(Requirements.member)  # Require session, require ASF member
        @require  # Require any authed session
        @require({Requirements.mfa_enabled, Requirements.chair})  # Require any project chair with MFA-enabled session
        @require(all_of=Requirements.mfa_enabled, any_of={Requirements.member, Requirements.chair})
          # Require either ASF member OR project chair, but also require MFA enabled in any case.
    """
    ...
